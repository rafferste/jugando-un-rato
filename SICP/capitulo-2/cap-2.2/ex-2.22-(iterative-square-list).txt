-------------------------------- Exercise 2.21 ---------------------------------   
Louis Reasoner tries to rewrite the first square-list procedure of exercise 2.21 
so that it evolves an iterative process:

(define (square-list items)
  (define (iter things answer)
    (if (null? things)
        answer
        (iter (cdr things) 
              (cons (square (car things))
                    answer))))
  (iter items nil))

Unfortunately, defining square-list this way produces the answer list in the 
reverse order of the one desired. Why?

Louis then tries to fix his bug by interchanging the arguments to cons:

(define (square-list items)
  (define (iter things answer)
    (if (null? things)
        answer
        (iter (cdr things)
              (cons answer
                    (square (car things))))))
  (iter items nil))

This doesn't work either. Explain.

En la primera definicion que hizo está claro por que le sale invertida la
lista, simplemente va agregando los nuevos elementos delante de la lista que
va formando, haciendo que los ultimos queden primeros. Luego de cambiar el orden
en la segunda definicion lo que le sucede es que está definiendo el "car" del par
con la lista que viene armando (como bloque entero) y luego le agrega al "cdr" el
el elemento individual, lo cual es erroneo ya que por definicion las listas se 
forman exactamente alrevez, para solucionar esto hay dos caminos, generar una 
lista invertida y luego aplicarle el procedimiento reverse, o generar una lista
en orden pero en vez de utilizar "cons", utilizar el procedimiento appends, este
lo que hace es que primero recorre toda la lista y luego acopla el elemento nuevo
al cdr del ultimo elemento de la lista.